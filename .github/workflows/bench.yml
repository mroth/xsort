name: test
on: push

jobs:
  bench:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go:
          - "1.18"
          - "1.19"
          - "1.20"
          - "1.21"
          - "1.22"
          - "1.23"
          - "1.24"
    name: Go ${{ matrix.go }} bench
    steps:
      - run: go install golang.org/x/perf/cmd/benchstat@latest
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - run: go test -bench=. -count=6 -cpu=1 | benchstat -col="/lib" - | tee results.txt
        env:
          GOTOOLCHAIN: local
      - uses: actions/upload-artifact@v4
        with:
          name: benchresults-go${{ matrix.go }}
          path: results.txt

  summarize:
    runs-on: ubuntu-latest
    needs: bench
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate benchmark results
        run: |
          OUTPUT_FILE="benchmark_summary.md"
          DIRECTORY="artifacts/benchresults-"
          
          # Write header
          echo "# Benchmark results" > "$OUTPUT_FILE"
          
          # Collect results
          declare -A results
          for file in $(find artifacts/benchresults-* -type f -name "results.txt" 2>/dev/null); do
              if [[ $file =~ artifacts/benchresults-go([0-9]+\.[0-9]+)/results.txt ]]; then
                  results[${BASH_REMATCH[1]}]="$file"
              fi
          done
          
          # Sort versions numerically
          for version in $(printf "%s\n" "${!results[@]}" | sort -V); do
              echo -e "\n## Go $version\n" >> "$OUTPUT_FILE"
              echo '```' >> "$OUTPUT_FILE"
              cat "${results[$version]}" >> "$OUTPUT_FILE"
              echo '```' >> "$OUTPUT_FILE"
          done
      - name: Display summary
        run: cat benchmark_summary.md
      - uses: actions/upload-artifact@v4
        with:
          name: benchmark-summary
          path: benchmark_summary.md
